#!/usr/bin/env python3
"""
Generate visualizations and HTML dashboard from existing analysis data.

This script reads CSV files generated by analyze.py and creates:
- 7 visualization charts (PNG)
- Interactive HTML dashboard

Usage:
    python visualize.py
"""

import os
import pandas as pd
from datetime import datetime

# ---- Config ----
HTML_DIR = "html"
CHART_DIR = os.path.join(HTML_DIR, "charts")

# Color scheme
COLORS = {
    'Portfolio': '#2E86AB',
    'SPY': '#A23B72',
    'QQQ': '#F18F01',
    'DIA': '#06A77D',
    'IWM': '#9D4EDD'
}


def generate_charts():
    """Generate all 7 visualization charts."""
    try:
        import matplotlib
        matplotlib.use('Agg')  # Non-interactive backend
        import matplotlib.pyplot as plt
        import matplotlib.dates as mdates
    except ImportError:
        print("ERROR: matplotlib not installed. Run: pip install matplotlib")
        return False

    print("Generating charts...")
    os.makedirs(CHART_DIR, exist_ok=True)

    # Read data files
    capture_df = pd.read_csv(os.path.join(HTML_DIR, "capture_stats.csv"))
    summary_df = pd.read_csv(os.path.join(HTML_DIR, "summary_stats.csv"))
    cum_df = pd.read_csv(os.path.join(HTML_DIR, "cumulative_returns.csv"), index_col=0, parse_dates=True)
    weights_df = pd.read_csv(os.path.join(HTML_DIR, "weights_used.csv"), index_col=0)

    # We need to reconstruct daily returns data for some charts
    # Calculate from cumulative returns
    ret_cols = [c for c in cum_df.columns if '_ret' in c or c == 'Portfolio_ret']
    if not ret_cols:
        ret_cols = cum_df.columns.tolist()

    # Convert cumulative to daily returns
    daily_ret = (cum_df + 1).pct_change().fillna(0)

    # 1. Cumulative Returns Chart
    fig, ax = plt.subplots(figsize=(14, 8))
    for col in cum_df.columns:
        label = col.replace('_ret', '').replace('Portfolio', 'Portfolio')
        ax.plot(cum_df.index, cum_df[col] * 100, label=label, linewidth=2, color=COLORS.get(label, 'gray'))
    ax.set_title('Cumulative Returns: Portfolio vs Benchmarks', fontsize=16, fontweight='bold')
    ax.set_xlabel('Date', fontsize=12)
    ax.set_ylabel('Cumulative Return (%)', fontsize=12)
    ax.legend(loc='best', fontsize=11)
    ax.grid(True, alpha=0.3)
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(CHART_DIR, '1_cumulative_returns.png'), dpi=150, bbox_inches='tight')
    plt.close()
    print("  ✓ Cumulative returns chart")

    # 2. Capture Ratios Comparison
    capture_data = capture_df[capture_df['Metric'].str.contains('capture')].copy()
    capture_data['Type'] = capture_data['Metric'].apply(lambda x: 'Downside' if 'Downside' in x else 'Upside')
    capture_data['Benchmark'] = capture_data['Metric'].str.extract(r'vs (\w+)')[0]

    fig, ax = plt.subplots(figsize=(12, 7))
    benchmarks = ['SPY', 'QQQ', 'DIA', 'IWM']
    x = range(len(benchmarks))
    width = 0.35
    downside_vals = [capture_data[(capture_data['Type']=='Downside') & (capture_data['Benchmark']==b)]['Value'].values[0] * 100 for b in benchmarks]
    upside_vals = [capture_data[(capture_data['Type']=='Upside') & (capture_data['Benchmark']==b)]['Value'].values[0] * 100 for b in benchmarks]

    ax.bar([i - width/2 for i in x], downside_vals, width, label='Downside Capture', color='#E63946', alpha=0.8)
    ax.bar([i + width/2 for i in x], upside_vals, width, label='Upside Capture', color='#06A77D', alpha=0.8)
    ax.axhline(y=100, color='gray', linestyle='--', linewidth=1, alpha=0.5)
    ax.set_ylabel('Capture Ratio (%)', fontsize=12)
    ax.set_title('Portfolio Capture Ratios vs Benchmarks', fontsize=16, fontweight='bold')
    ax.set_xticks(x)
    ax.set_xticklabels(benchmarks, fontsize=11)
    ax.legend(fontsize=11)
    ax.grid(True, alpha=0.3, axis='y')
    for i, (d, u) in enumerate(zip(downside_vals, upside_vals)):
        ax.text(i - width/2, d + 2, f'{d:.1f}%', ha='center', va='bottom', fontsize=9, fontweight='bold')
        ax.text(i + width/2, u + 2, f'{u:.1f}%', ha='center', va='bottom', fontsize=9, fontweight='bold')
    plt.tight_layout()
    plt.savefig(os.path.join(CHART_DIR, '2_capture_ratios.png'), dpi=150, bbox_inches='tight')
    plt.close()
    print("  ✓ Capture ratios chart")

    # 3. Hit Rates on Down Days
    hit_rate_data = capture_df[capture_df['Metric'].str.contains('Hit-rate')].copy()
    hit_rate_data['Benchmark'] = hit_rate_data['Metric'].str.extract(r'on (\w+)-down')[0]
    hit_rate_data = hit_rate_data[hit_rate_data['Benchmark'].notna()]

    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.bar(hit_rate_data['Benchmark'], hit_rate_data['Value'] * 100, color='#2E86AB', alpha=0.8)
    ax.set_ylabel('Hit Rate (%)', fontsize=12)
    ax.set_title('Portfolio Hit Rate on Benchmark Down Days\n(% of days portfolio ≥ 0%)', fontsize=16, fontweight='bold')
    ax.grid(True, alpha=0.3, axis='y')
    for bar in bars:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 1,
               f'{height:.1f}%', ha='center', va='bottom', fontsize=10, fontweight='bold')
    plt.tight_layout()
    plt.savefig(os.path.join(CHART_DIR, '3_hit_rates.png'), dpi=150, bbox_inches='tight')
    plt.close()
    print("  ✓ Hit rates chart")

    # 4. Return Distribution Box Plots
    fig, ax = plt.subplots(figsize=(12, 7))
    data_to_plot = [daily_ret[col] * 100 for col in daily_ret.columns]
    labels = [col.replace('_ret', '') for col in daily_ret.columns]
    bp = ax.boxplot(data_to_plot, labels=labels, patch_artist=True, widths=0.6)
    for patch, label in zip(bp['boxes'], labels):
        patch.set_facecolor(COLORS.get(label, 'lightgray'))
        patch.set_alpha(0.7)
    ax.set_ylabel('Daily Return (%)', fontsize=12)
    ax.set_title('Return Distribution Comparison', fontsize=16, fontweight='bold')
    ax.grid(True, alpha=0.3, axis='y')
    ax.axhline(y=0, color='red', linestyle='--', linewidth=1, alpha=0.5)
    plt.tight_layout()
    plt.savefig(os.path.join(CHART_DIR, '4_return_distributions.png'), dpi=150, bbox_inches='tight')
    plt.close()
    print("  ✓ Return distributions chart")

    # 5. Average Returns: Up vs Down Days (from summary stats)
    fig, ax = plt.subplots(figsize=(14, 8))
    benchmarks = ['SPY', 'QQQ', 'DIA', 'IWM']
    x = range(len(benchmarks))
    width = 0.35

    avg_on_down = []
    avg_on_up = []
    for bench in benchmarks:
        down_row = summary_df[summary_df['Category'] == f'{bench}_down_days']
        up_row = summary_df[summary_df['Category'] == f'{bench}_up_or_flat_days']
        if not down_row.empty:
            avg_on_down.append(down_row['Portfolio_avg'].values[0] * 100)
        else:
            avg_on_down.append(0)
        if not up_row.empty:
            avg_on_up.append(up_row['Portfolio_avg'].values[0] * 100)
        else:
            avg_on_up.append(0)

    ax.bar([i - width/2 for i in x], avg_on_down, width, label='Portfolio on Down Days', color='#E63946', alpha=0.8)
    ax.bar([i + width/2 for i in x], avg_on_up, width, label='Portfolio on Up Days', color='#06A77D', alpha=0.8)
    ax.axhline(y=0, color='black', linestyle='-', linewidth=1)
    ax.set_ylabel('Average Daily Return (%)', fontsize=12)
    ax.set_title('Portfolio Average Returns on Benchmark Up vs Down Days', fontsize=16, fontweight='bold')
    ax.set_xticks(x)
    ax.set_xticklabels([f'{b} Days' for b in benchmarks], fontsize=11)
    ax.legend(fontsize=11)
    ax.grid(True, alpha=0.3, axis='y')
    for i, (d, u) in enumerate(zip(avg_on_down, avg_on_up)):
        ax.text(i - width/2, d - 0.02 if d < 0 else d + 0.02, f'{d:.2f}%',
               ha='center', va='top' if d < 0 else 'bottom', fontsize=9, fontweight='bold')
        ax.text(i + width/2, u + 0.02, f'{u:.2f}%', ha='center', va='bottom', fontsize=9, fontweight='bold')
    plt.tight_layout()
    plt.savefig(os.path.join(CHART_DIR, '5_avg_returns_up_down.png'), dpi=150, bbox_inches='tight')
    plt.close()
    print("  ✓ Average returns chart")

    # 6. Drawdown Chart
    dd_data = pd.DataFrame(index=cum_df.index)
    for col in cum_df.columns:
        cum_ret = (cum_df[col] + 1)
        running_max = cum_ret.expanding().max()
        dd_data[col.replace('_ret', '')] = (cum_ret - running_max) / running_max * 100

    fig, ax = plt.subplots(figsize=(14, 8))
    for col in dd_data.columns:
        ax.plot(dd_data.index, dd_data[col], label=col, linewidth=2, color=COLORS.get(col, 'gray'))
    portfolio_col = 'Portfolio' if 'Portfolio' in dd_data.columns else dd_data.columns[0]
    ax.fill_between(dd_data.index, 0, dd_data[portfolio_col], alpha=0.3, color=COLORS.get(portfolio_col, COLORS['Portfolio']))
    ax.set_title('Drawdown Comparison', fontsize=16, fontweight='bold')
    ax.set_xlabel('Date', fontsize=12)
    ax.set_ylabel('Drawdown (%)', fontsize=12)
    ax.legend(loc='best', fontsize=11)
    ax.grid(True, alpha=0.3)
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(os.path.join(CHART_DIR, '6_drawdown.png'), dpi=150, bbox_inches='tight')
    plt.close()
    print("  ✓ Drawdown chart")

    # 7. Portfolio Composition
    weights_top = weights_df.sort_values('Weight', ascending=False).head(10)
    weights_other = weights_df.sort_values('Weight', ascending=False)[10:]['Weight'].sum()

    fig, ax = plt.subplots(figsize=(10, 10))
    if weights_other > 0:
        labels = list(weights_top.index) + ['Other']
        sizes = list(weights_top['Weight'].values) + [weights_other]
    else:
        labels = list(weights_top.index)
        sizes = list(weights_top['Weight'].values)

    colors_pie = plt.cm.Set3(range(len(labels)))
    wedges, texts, autotexts = ax.pie(sizes, labels=labels, autopct='%1.1f%%',
                                       startangle=90, colors=colors_pie, textprops={'fontsize': 10})
    for autotext in autotexts:
        autotext.set_color('black')
        autotext.set_fontweight('bold')
    ax.set_title('Portfolio Composition (Top 10 Holdings)', fontsize=16, fontweight='bold')
    plt.tight_layout()
    plt.savefig(os.path.join(CHART_DIR, '7_portfolio_composition.png'), dpi=150, bbox_inches='tight')
    plt.close()
    print("  ✓ Portfolio composition chart")

    print(f"\n✓ All charts saved to {CHART_DIR}/")
    return True


def generate_html_dashboard():
    """Generate HTML dashboard from CSV data."""
    print("\nGenerating HTML dashboard...")

    # Read data files
    capture_df = pd.read_csv(os.path.join(HTML_DIR, "capture_stats.csv"))
    summary_df = pd.read_csv(os.path.join(HTML_DIR, "summary_stats.csv"))
    weights_df = pd.read_csv(os.path.join(HTML_DIR, "weights_used.csv"))

    # Extract metadata from summary
    num_positions = len(weights_df)

    html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portfolio Analysis Dashboard</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f5f5f5;
            padding: 20px;
        }}
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            padding: 40px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #2E86AB;
            margin-bottom: 10px;
            font-size: 2.5em;
        }}
        .subtitle {{
            color: #666;
            font-size: 1.1em;
            margin-bottom: 30px;
        }}
        .metadata {{
            background: #f9f9f9;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 30px;
            border-left: 4px solid #2E86AB;
        }}
        .metadata p {{
            margin: 5px 0;
            color: #555;
        }}
        h2 {{
            color: #2E86AB;
            margin-top: 40px;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #2E86AB;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 30px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }}
        th {{
            background: #2E86AB;
            color: white;
            padding: 12px;
            text-align: left;
            font-weight: 600;
        }}
        td {{
            padding: 12px;
            border-bottom: 1px solid #ddd;
        }}
        tr:hover {{
            background: #f5f5f5;
        }}
        .metric-value {{
            font-weight: bold;
            color: #2E86AB;
        }}
        .good {{
            color: #06A77D;
            font-weight: bold;
        }}
        .moderate {{
            color: #F18F01;
            font-weight: bold;
        }}
        .charts-grid {{
            display: grid;
            grid-template-columns: 1fr;
            gap: 30px;
            margin-top: 30px;
        }}
        .chart-container {{
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        .chart-container h3 {{
            color: #333;
            margin-bottom: 15px;
            font-size: 1.3em;
        }}
        .chart-container img {{
            width: 100%;
            height: auto;
            border-radius: 5px;
        }}
        .footer {{
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
            text-align: center;
            color: #666;
            font-size: 0.9em;
        }}
        @media print {{
            body {{
                background: white;
            }}
            .container {{
                box-shadow: none;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>📊 Portfolio Analysis Dashboard</h1>
        <p class="subtitle">Downside Protection Strategy Analysis</p>

        <div class="metadata">
            <p><strong>Portfolio Positions:</strong> {num_positions} equities</p>
            <p><strong>Benchmarks:</strong> SPY (S&P 500), QQQ (Nasdaq 100), DIA (DJIA), IWM (Russell 2000)</p>
            <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>

        <h2>🎯 Capture Ratios</h2>
        <table>
            <thead>
                <tr>
                    <th>Metric</th>
                    <th>Value</th>
                    <th>Interpretation</th>
                </tr>
            </thead>
            <tbody>
"""

    # Add capture ratios to table
    for _, row in capture_df[capture_df['Metric'].str.contains('capture')].iterrows():
        metric = row['Metric']
        value = row['Value'] * 100

        if 'Downside' in metric:
            interpretation = "Lower is better - less downside captured"
            color_class = 'good' if value < 70 else 'moderate'
        else:
            interpretation = "Higher is better - more upside captured"
            color_class = 'good' if value > 80 else 'moderate'

        html_content += f"""
                <tr>
                    <td>{metric}</td>
                    <td class="{color_class}">{value:.1f}%</td>
                    <td>{interpretation}</td>
                </tr>
"""

    html_content += """
            </tbody>
        </table>

        <h2>🛡️ Hit Rates on Down Days</h2>
        <p style="margin-bottom: 15px; color: #666;">Percentage of days portfolio is non-negative when benchmark is down</p>
        <table>
            <thead>
                <tr>
                    <th>Benchmark Down Days</th>
                    <th>Portfolio Hit Rate</th>
                    <th>Interpretation</th>
                </tr>
            </thead>
            <tbody>
"""

    # Add hit rates to table
    for _, row in capture_df[capture_df['Metric'].str.contains('Hit-rate')].iterrows():
        metric = row['Metric']
        value = row['Value'] * 100
        benchmark = metric.split('on ')[1].split('-down')[0]
        color_class = 'good' if value > 35 else 'moderate'
        html_content += f"""
                <tr>
                    <td>{benchmark} down days</td>
                    <td class="{color_class}">{value:.1f}%</td>
                    <td>Portfolio positive {value:.1f}% of the time</td>
                </tr>
"""

    html_content += """
            </tbody>
        </table>

        <h2>📈 Performance Summary</h2>
        <table>
            <thead>
                <tr>
                    <th>Market Condition</th>
                    <th>Days</th>
                    <th>Portfolio Hit Rate</th>
                    <th>Portfolio Avg Return</th>
                    <th>Portfolio Worst Day</th>
                </tr>
            </thead>
            <tbody>
"""

    # Add summary stats
    for _, row in summary_df.iterrows():
        # Format category: keep ticker symbols in CAPS, title-case the rest
        category_raw = row['Category'].replace('_', ' ')
        words = category_raw.split()
        # Keep benchmark tickers and BOTH in uppercase, title-case everything else
        formatted_words = [w.upper() if w.upper() in ['SPY', 'QQQ', 'DIA', 'IWM', 'BOTH'] else w.title() for w in words]
        category = ' '.join(formatted_words)

        days = int(row['Days'])
        hit_rate = row['Portfolio_hit_rate_(>=0%)'] * 100
        avg_return = row['Portfolio_avg'] * 100
        worst = row['Portfolio_worst'] * 100

        html_content += f"""
                <tr>
                    <td>{category}</td>
                    <td>{days}</td>
                    <td class="metric-value">{hit_rate:.1f}%</td>
                    <td class="metric-value">{avg_return:+.2f}%</td>
                    <td class="metric-value">{worst:+.2f}%</td>
                </tr>
"""

    html_content += """
            </tbody>
        </table>

        <h2>📊 Visualizations</h2>

        <div class="charts-grid">
            <div class="chart-container">
                <h3>1. Cumulative Returns</h3>
                <img src="charts/1_cumulative_returns.png" alt="Cumulative Returns">
            </div>

            <div class="chart-container">
                <h3>2. Capture Ratios Comparison</h3>
                <img src="charts/2_capture_ratios.png" alt="Capture Ratios">
            </div>

            <div class="chart-container">
                <h3>3. Hit Rates on Down Days</h3>
                <img src="charts/3_hit_rates.png" alt="Hit Rates">
            </div>

            <div class="chart-container">
                <h3>4. Return Distribution Comparison</h3>
                <img src="charts/4_return_distributions.png" alt="Return Distributions">
            </div>

            <div class="chart-container">
                <h3>5. Average Returns: Up vs Down Days</h3>
                <img src="charts/5_avg_returns_up_down.png" alt="Average Returns">
            </div>

            <div class="chart-container">
                <h3>6. Drawdown Comparison</h3>
                <img src="charts/6_drawdown.png" alt="Drawdown">
            </div>

            <div class="chart-container">
                <h3>7. Portfolio Composition</h3>
                <img src="charts/7_portfolio_composition.png" alt="Portfolio Composition">
            </div>
        </div>

        <div class="footer">
            <p>Portfolio Analysis Tool | Generated by visualize.py</p>
        </div>
    </div>
</body>
</html>
"""

    # Write HTML dashboard
    html_path = os.path.join(HTML_DIR, "index.html")
    with open(html_path, 'w', encoding='utf-8') as f:
        f.write(html_content)

    print(f"✓ HTML dashboard saved to {html_path}")
    return True


def main():
    """Main execution function."""
    print("=" * 60)
    print("Portfolio Visualization Generator")
    print("=" * 60)

    # Check if data files exist
    required_files = [
        "capture_stats.csv",
        "summary_stats.csv",
        "cumulative_returns.csv",
        "weights_used.csv"
    ]

    missing = []
    for fname in required_files:
        if not os.path.exists(os.path.join(HTML_DIR, fname)):
            missing.append(fname)

    if missing:
        print("\n❌ ERROR: Missing required data files:")
        for fname in missing:
            print(f"   - {HTML_DIR}/{fname}")
        print("\nPlease run analyze.py first to generate the data.")
        return 1

    # Generate visualizations
    charts_ok = generate_charts()
    if not charts_ok:
        print("\n⚠️  Charts generation failed, but continuing with HTML...")

    # Generate HTML dashboard
    html_ok = generate_html_dashboard()

    if html_ok:
        print("\n" + "=" * 60)
        print("✓ Visualization complete!")
        print(f"  Open: {HTML_DIR}/index.html")
        print("=" * 60)
        return 0
    else:
        print("\n❌ HTML generation failed")
        return 1


if __name__ == "__main__":
    exit(main())
